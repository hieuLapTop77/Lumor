version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: photo_sharing_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: photo_sharing_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/001_schema.sql
      - ./database/seeds/sample_data.sql:/docker-entrypoint-initdb.d/002_sample_data.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d photo_sharing_db"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - photo_sharing_network

  # Backend Application
  backend:
    build: .
    container_name: photo_sharing_backend
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    environment:
      # Database Configuration
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: photo_sharing_db
      DB_USER: postgres
      DB_PASSWORD: postgres123
      
      # JWT Configuration
      JWT_SECRET: your_super_secret_jwt_key_for_development_change_in_production
      JWT_EXPIRES_IN: 7d
      
      # Server Configuration
      PORT: 3000
      NODE_ENV: development
      
      # File Upload Configuration
      UPLOAD_MAX_SIZE: 50MB
      UPLOAD_ALLOWED_TYPES: image/jpeg,image/png,image/gif,image/webp,image/heic
      MAX_FILES_PER_REQUEST: 100
      
      # Storage Configuration
      STORAGE_TYPE: local
      UPLOAD_PATH: /app/uploads
      
      # Security Configuration
      CORS_ORIGIN: http://localhost:3000
      RATE_LIMIT_ENABLED: true
      
      # Feature Flags
      FEATURE_DEVICE_SYNC: true
      FEATURE_PHOTO_SHARING: true
      FEATURE_PERMISSION_GROUPS: true
      FEATURE_BULK_UPLOAD: true
      
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - uploads_data:/app/uploads
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - photo_sharing_network

  # Database Admin Tool (Optional)
  adminer:
    image: adminer:latest
    container_name: photo_sharing_adminer
    restart: unless-stopped
    depends_on:
      - database
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: database
      ADMINER_DESIGN: dracula
    networks:
      - photo_sharing_network

  # Redis Cache (Optional - for future caching)
  redis:
    image: redis:7-alpine
    container_name: photo_sharing_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - photo_sharing_network

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local
  redis_data:
    driver: local

networks:
  photo_sharing_network:
    driver: bridge 